(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{642:function(t,v,_){"use strict";_.r(v);var s=_(4),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("有位好朋友去美团面试. 他说, 被问到Redis与MySQL写一致性如何保证? 其实就是在问缓存和数据库在双写场景下, 一致性是如何保证的?")]),t._v(" "),_("p",[t._v("当我们在生产线上, 用一台服务器来"),_("strong",[t._v("提供数据服务")]),t._v("的时候, 我会遇到如下的两个问题:")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("一台服务器的性能不足以提供足够的能力服务于所有的网络请求")])]),t._v(" "),_("li",[_("p",[t._v("我们总是害怕我们的这台服务器停机, 造成服务不可用或是数据丢失")])])]),t._v(" "),_("p",[t._v("于是我们不得不对我们的服务器进行扩展, 加入更多的机器来分担性能上的问题, 以及来解决单点故障问题.")]),t._v(" "),_("p",[t._v("通常, 我们会通过两种手段来扩展我们的"),_("strong",[t._v("数据服务")]),t._v(":")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("数据分区")]),t._v(": 就是把数据分块放在不同的服务器上(如:一致性哈希等)")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("数据镜像")]),t._v(": 让所有的服务器都有相同的数据, 提供相当的服务")])])]),t._v(" "),_("p",[t._v("对于"),_("strong",[t._v("数据分区")]),t._v("的解决方案, 我们无法解决数据丢失的问题, 单台服务器出问题时, 会有部分数据丢失. 所以, "),_("strong",[t._v("数据服务的高可用性只能通过 "),_("code",[t._v("数据镜像的方案")]),t._v(" 来完成 — 数据的冗余存储")]),t._v("(一般工业界认为比较安全的备份数应该是3份. 如: Hadoop, Dynamo)")]),t._v(" "),_("h3",{attrs:{id:"一致性模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一致性模型"}},[t._v("#")]),t._v(" 一致性模型")]),t._v(" "),_("p",[t._v("说起数据一致性来说, 简单说有三种类型 (如果细分的话, 还有很多一致性模型, 如: 顺序一致性, FIFO一致性, 会话一致性, 单读一致性, 单写一致性):")]),t._v(" "),_("h4",{attrs:{id:"强一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强一致性"}},[t._v("#")]),t._v(" 强一致性")]),t._v(" "),_("p",[t._v("新的数据一旦写入, 在任意副本任意时刻都能读到新值")]),t._v(" "),_("h4",{attrs:{id:"弱一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#弱一致性"}},[t._v("#")]),t._v(" 弱一致性")]),t._v(" "),_("h4",{attrs:{id:"最终一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最终一致性"}},[t._v("#")]),t._v(" 最终一致性")])])}),[],!1,null,null,null);v.default=a.exports}}]);