(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{462:function(t,e,s){t.exports=s.p+"assets/img/overall.8e6491c1.png"},463:function(t,e,s){t.exports=s.p+"assets/img/image-20250601171142223.1c2d37e4.png"},641:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("今天外面风大, 就来聊聊这几天挺火的MCP(会不会是下个风口呢~)")]),t._v(" "),e("h3",{attrs:{id:"一-什么是mcp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是mcp"}},[t._v("#")]),t._v(" 一. 什么是MCP")]),t._v(" "),e("p",[t._v("MCP 全名 "),e("code",[t._v("Module Conext Protocol")])]),t._v(" "),e("p",[t._v("从技术层面看, "),e("code",[t._v("MCP")]),t._v(" 就是带有自描述的API, 可以给大模型使用. 理论上现在已经做了API的这些公共服务, 都可以用MCP的方式再去实现一遍.")]),t._v(" "),e("p",[t._v("从产品层面来, API 是给开发者用的, 要通过程序员, 用代码把API包装成一个产品, 给用户使用. 但MCP是给大模型用的, 大模型可以直接根据意图, 自己组装使用MCP服务. MCP 自身就能完成一个产品的功能, 而且还能理解自然语言.")]),t._v(" "),e("blockquote",[e("p",[t._v("比如: 我现在想要根据, 当地的实时天气, 给我推荐现在出门要穿什么衣服.")])]),t._v(" "),e("h3",{attrs:{id:"二-mcp-与-api-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-mcp-与-api-的区别"}},[t._v("#")]),t._v(" 二. MCP 与 API 的区别")]),t._v(" "),e("p",[t._v("以我目前对 MCP 的理解, API是服务中心化的具体表现形式了, 面 MCP 相对于API 来讲, 他是一个去中心化的产物. 开发一个 "),e("code",[t._v("MCP Service")]),t._v(" 可以在任何一个支持MCP的Ai客户端上使用. 甚至MCP服务可以部署在本地(很多场景, 还是需要读一些本地的文件).")]),t._v(" "),e("p",[t._v("MCP 也可以像API 一样传入参数, 使用上做鉴权, 这样商业模式会更加丰富, 也更好被厂商推广(资本家不会干捞不到钱的事儿)")]),t._v(" "),e("p",[t._v("MCP 天然就是跨端的, 无论是什么模型, 都可以调用工具. 模型部署成本越来越低, 逐步向终端方向发展.")]),t._v(" "),e("h3",{attrs:{id:"三-spirngai-mcp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-spirngai-mcp"}},[t._v("#")]),t._v(" 三. SpirngAi & MCP")]),t._v(" "),e("h4",{attrs:{id:"_1-大模型调用-mcp-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-大模型调用-mcp-service"}},[t._v("#")]),t._v(" 1. 大模型调用 MCP Service")]),t._v(" "),e("p",[e("img",{attrs:{src:s(462),alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"四-mcp-实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-mcp-实战"}},[t._v("#")]),t._v(" 四. MCP 实战")]),t._v(" "),e("blockquote",[e("p",[t._v("就来实现上面咱们举的例子吧")])]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("npx @modelcontextprotocol/inspector "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("node")]),t._v(" build/index.js\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h4",{attrs:{id:"_1-mcp-执行细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-mcp-执行细节"}},[t._v("#")]),t._v(" 1. MCP 执行细节")]),t._v(" "),e("p",[e("img",{attrs:{src:s(463),alt:"image-20250601171142223"}})]),t._v(" "),e("ol",[e("li",[t._v("MCP Client首先从MCP Server获取可用的工具列表")]),t._v(" "),e("li",[t._v("将用户的Query连同工具描述通过Function Calling一起发送给 LLM")]),t._v(" "),e("li",[t._v("LLM 决定是否需要使用工具以及使用哪些工具")]),t._v(" "),e("li",[t._v("如果需要使用工具, MCP Client会通过 MCP Server执行相应的工具调用")]),t._v(" "),e("li",[t._v("工具调用的结果会被发送回LLM")]),t._v(" "),e("li",[t._v("LLM基于所有信息生成自然语言响应")]),t._v(" "),e("li",[t._v("最后将响应展示给用户")])])])}),[],!1,null,null,null);e.default=r.exports}}]);